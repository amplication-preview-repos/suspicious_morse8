/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EtlConfigurationService } from "../etlConfiguration.service";
import { EtlConfigurationCreateInput } from "./EtlConfigurationCreateInput";
import { EtlConfiguration } from "./EtlConfiguration";
import { EtlConfigurationFindManyArgs } from "./EtlConfigurationFindManyArgs";
import { EtlConfigurationWhereUniqueInput } from "./EtlConfigurationWhereUniqueInput";
import { EtlConfigurationUpdateInput } from "./EtlConfigurationUpdateInput";

export class EtlConfigurationControllerBase {
  constructor(protected readonly service: EtlConfigurationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EtlConfiguration })
  async createEtlConfiguration(
    @common.Body() data: EtlConfigurationCreateInput
  ): Promise<EtlConfiguration> {
    return await this.service.createEtlConfiguration({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        dataSource: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EtlConfiguration] })
  @ApiNestedQuery(EtlConfigurationFindManyArgs)
  async etlConfigurations(
    @common.Req() request: Request
  ): Promise<EtlConfiguration[]> {
    const args = plainToClass(EtlConfigurationFindManyArgs, request.query);
    return this.service.etlConfigurations({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        dataSource: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EtlConfiguration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async etlConfiguration(
    @common.Param() params: EtlConfigurationWhereUniqueInput
  ): Promise<EtlConfiguration | null> {
    const result = await this.service.etlConfiguration({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        dataSource: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EtlConfiguration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEtlConfiguration(
    @common.Param() params: EtlConfigurationWhereUniqueInput,
    @common.Body() data: EtlConfigurationUpdateInput
  ): Promise<EtlConfiguration | null> {
    try {
      return await this.service.updateEtlConfiguration({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          dataSource: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EtlConfiguration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEtlConfiguration(
    @common.Param() params: EtlConfigurationWhereUniqueInput
  ): Promise<EtlConfiguration | null> {
    try {
      return await this.service.deleteEtlConfiguration({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          dataSource: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
