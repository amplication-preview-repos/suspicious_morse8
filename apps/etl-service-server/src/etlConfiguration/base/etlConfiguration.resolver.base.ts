/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EtlConfiguration } from "./EtlConfiguration";
import { EtlConfigurationCountArgs } from "./EtlConfigurationCountArgs";
import { EtlConfigurationFindManyArgs } from "./EtlConfigurationFindManyArgs";
import { EtlConfigurationFindUniqueArgs } from "./EtlConfigurationFindUniqueArgs";
import { CreateEtlConfigurationArgs } from "./CreateEtlConfigurationArgs";
import { UpdateEtlConfigurationArgs } from "./UpdateEtlConfigurationArgs";
import { DeleteEtlConfigurationArgs } from "./DeleteEtlConfigurationArgs";
import { EtlConfigurationService } from "../etlConfiguration.service";
@graphql.Resolver(() => EtlConfiguration)
export class EtlConfigurationResolverBase {
  constructor(protected readonly service: EtlConfigurationService) {}

  async _etlConfigurationsMeta(
    @graphql.Args() args: EtlConfigurationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EtlConfiguration])
  async etlConfigurations(
    @graphql.Args() args: EtlConfigurationFindManyArgs
  ): Promise<EtlConfiguration[]> {
    return this.service.etlConfigurations(args);
  }

  @graphql.Query(() => EtlConfiguration, { nullable: true })
  async etlConfiguration(
    @graphql.Args() args: EtlConfigurationFindUniqueArgs
  ): Promise<EtlConfiguration | null> {
    const result = await this.service.etlConfiguration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EtlConfiguration)
  async createEtlConfiguration(
    @graphql.Args() args: CreateEtlConfigurationArgs
  ): Promise<EtlConfiguration> {
    return await this.service.createEtlConfiguration({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EtlConfiguration)
  async updateEtlConfiguration(
    @graphql.Args() args: UpdateEtlConfigurationArgs
  ): Promise<EtlConfiguration | null> {
    try {
      return await this.service.updateEtlConfiguration({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EtlConfiguration)
  async deleteEtlConfiguration(
    @graphql.Args() args: DeleteEtlConfigurationArgs
  ): Promise<EtlConfiguration | null> {
    try {
      return await this.service.deleteEtlConfiguration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
