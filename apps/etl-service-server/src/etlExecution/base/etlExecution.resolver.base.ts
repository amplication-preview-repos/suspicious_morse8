/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EtlExecution } from "./EtlExecution";
import { EtlExecutionCountArgs } from "./EtlExecutionCountArgs";
import { EtlExecutionFindManyArgs } from "./EtlExecutionFindManyArgs";
import { EtlExecutionFindUniqueArgs } from "./EtlExecutionFindUniqueArgs";
import { CreateEtlExecutionArgs } from "./CreateEtlExecutionArgs";
import { UpdateEtlExecutionArgs } from "./UpdateEtlExecutionArgs";
import { DeleteEtlExecutionArgs } from "./DeleteEtlExecutionArgs";
import { EtlExecutionService } from "../etlExecution.service";
@graphql.Resolver(() => EtlExecution)
export class EtlExecutionResolverBase {
  constructor(protected readonly service: EtlExecutionService) {}

  async _etlExecutionsMeta(
    @graphql.Args() args: EtlExecutionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EtlExecution])
  async etlExecutions(
    @graphql.Args() args: EtlExecutionFindManyArgs
  ): Promise<EtlExecution[]> {
    return this.service.etlExecutions(args);
  }

  @graphql.Query(() => EtlExecution, { nullable: true })
  async etlExecution(
    @graphql.Args() args: EtlExecutionFindUniqueArgs
  ): Promise<EtlExecution | null> {
    const result = await this.service.etlExecution(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EtlExecution)
  async createEtlExecution(
    @graphql.Args() args: CreateEtlExecutionArgs
  ): Promise<EtlExecution> {
    return await this.service.createEtlExecution({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EtlExecution)
  async updateEtlExecution(
    @graphql.Args() args: UpdateEtlExecutionArgs
  ): Promise<EtlExecution | null> {
    try {
      return await this.service.updateEtlExecution({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EtlExecution)
  async deleteEtlExecution(
    @graphql.Args() args: DeleteEtlExecutionArgs
  ): Promise<EtlExecution | null> {
    try {
      return await this.service.deleteEtlExecution(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
