/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EtlExecution as PrismaEtlExecution } from "@prisma/client";

export class EtlExecutionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EtlExecutionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.etlExecution.count(args);
  }

  async etlExecutions(
    args: Prisma.EtlExecutionFindManyArgs
  ): Promise<PrismaEtlExecution[]> {
    return this.prisma.etlExecution.findMany(args);
  }
  async etlExecution(
    args: Prisma.EtlExecutionFindUniqueArgs
  ): Promise<PrismaEtlExecution | null> {
    return this.prisma.etlExecution.findUnique(args);
  }
  async createEtlExecution(
    args: Prisma.EtlExecutionCreateArgs
  ): Promise<PrismaEtlExecution> {
    return this.prisma.etlExecution.create(args);
  }
  async updateEtlExecution(
    args: Prisma.EtlExecutionUpdateArgs
  ): Promise<PrismaEtlExecution> {
    return this.prisma.etlExecution.update(args);
  }
  async deleteEtlExecution(
    args: Prisma.EtlExecutionDeleteArgs
  ): Promise<PrismaEtlExecution> {
    return this.prisma.etlExecution.delete(args);
  }
}
