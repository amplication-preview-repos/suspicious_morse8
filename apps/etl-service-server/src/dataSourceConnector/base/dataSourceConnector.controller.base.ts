/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataSourceConnectorService } from "../dataSourceConnector.service";
import { DataSourceConnectorCreateInput } from "./DataSourceConnectorCreateInput";
import { DataSourceConnector } from "./DataSourceConnector";
import { DataSourceConnectorFindManyArgs } from "./DataSourceConnectorFindManyArgs";
import { DataSourceConnectorWhereUniqueInput } from "./DataSourceConnectorWhereUniqueInput";
import { DataSourceConnectorUpdateInput } from "./DataSourceConnectorUpdateInput";

export class DataSourceConnectorControllerBase {
  constructor(protected readonly service: DataSourceConnectorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataSourceConnector })
  async createDataSourceConnector(
    @common.Body() data: DataSourceConnectorCreateInput
  ): Promise<DataSourceConnector> {
    return await this.service.createDataSourceConnector({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        endpoint: true,
        credentials: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataSourceConnector] })
  @ApiNestedQuery(DataSourceConnectorFindManyArgs)
  async dataSourceConnectors(
    @common.Req() request: Request
  ): Promise<DataSourceConnector[]> {
    const args = plainToClass(DataSourceConnectorFindManyArgs, request.query);
    return this.service.dataSourceConnectors({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        endpoint: true,
        credentials: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataSourceConnector })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataSourceConnector(
    @common.Param() params: DataSourceConnectorWhereUniqueInput
  ): Promise<DataSourceConnector | null> {
    const result = await this.service.dataSourceConnector({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        endpoint: true,
        credentials: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataSourceConnector })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataSourceConnector(
    @common.Param() params: DataSourceConnectorWhereUniqueInput,
    @common.Body() data: DataSourceConnectorUpdateInput
  ): Promise<DataSourceConnector | null> {
    try {
      return await this.service.updateDataSourceConnector({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          typeField: true,
          endpoint: true,
          credentials: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataSourceConnector })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataSourceConnector(
    @common.Param() params: DataSourceConnectorWhereUniqueInput
  ): Promise<DataSourceConnector | null> {
    try {
      return await this.service.deleteDataSourceConnector({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          typeField: true,
          endpoint: true,
          credentials: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
