/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DataSourceConnector } from "./DataSourceConnector";
import { DataSourceConnectorCountArgs } from "./DataSourceConnectorCountArgs";
import { DataSourceConnectorFindManyArgs } from "./DataSourceConnectorFindManyArgs";
import { DataSourceConnectorFindUniqueArgs } from "./DataSourceConnectorFindUniqueArgs";
import { CreateDataSourceConnectorArgs } from "./CreateDataSourceConnectorArgs";
import { UpdateDataSourceConnectorArgs } from "./UpdateDataSourceConnectorArgs";
import { DeleteDataSourceConnectorArgs } from "./DeleteDataSourceConnectorArgs";
import { DataSourceConnectorService } from "../dataSourceConnector.service";
@graphql.Resolver(() => DataSourceConnector)
export class DataSourceConnectorResolverBase {
  constructor(protected readonly service: DataSourceConnectorService) {}

  async _dataSourceConnectorsMeta(
    @graphql.Args() args: DataSourceConnectorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DataSourceConnector])
  async dataSourceConnectors(
    @graphql.Args() args: DataSourceConnectorFindManyArgs
  ): Promise<DataSourceConnector[]> {
    return this.service.dataSourceConnectors(args);
  }

  @graphql.Query(() => DataSourceConnector, { nullable: true })
  async dataSourceConnector(
    @graphql.Args() args: DataSourceConnectorFindUniqueArgs
  ): Promise<DataSourceConnector | null> {
    const result = await this.service.dataSourceConnector(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DataSourceConnector)
  async createDataSourceConnector(
    @graphql.Args() args: CreateDataSourceConnectorArgs
  ): Promise<DataSourceConnector> {
    return await this.service.createDataSourceConnector({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DataSourceConnector)
  async updateDataSourceConnector(
    @graphql.Args() args: UpdateDataSourceConnectorArgs
  ): Promise<DataSourceConnector | null> {
    try {
      return await this.service.updateDataSourceConnector({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DataSourceConnector)
  async deleteDataSourceConnector(
    @graphql.Args() args: DeleteDataSourceConnectorArgs
  ): Promise<DataSourceConnector | null> {
    try {
      return await this.service.deleteDataSourceConnector(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
