/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DataSourceConnector as PrismaDataSourceConnector,
} from "@prisma/client";

export class DataSourceConnectorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DataSourceConnectorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dataSourceConnector.count(args);
  }

  async dataSourceConnectors(
    args: Prisma.DataSourceConnectorFindManyArgs
  ): Promise<PrismaDataSourceConnector[]> {
    return this.prisma.dataSourceConnector.findMany(args);
  }
  async dataSourceConnector(
    args: Prisma.DataSourceConnectorFindUniqueArgs
  ): Promise<PrismaDataSourceConnector | null> {
    return this.prisma.dataSourceConnector.findUnique(args);
  }
  async createDataSourceConnector(
    args: Prisma.DataSourceConnectorCreateArgs
  ): Promise<PrismaDataSourceConnector> {
    return this.prisma.dataSourceConnector.create(args);
  }
  async updateDataSourceConnector(
    args: Prisma.DataSourceConnectorUpdateArgs
  ): Promise<PrismaDataSourceConnector> {
    return this.prisma.dataSourceConnector.update(args);
  }
  async deleteDataSourceConnector(
    args: Prisma.DataSourceConnectorDeleteArgs
  ): Promise<PrismaDataSourceConnector> {
    return this.prisma.dataSourceConnector.delete(args);
  }
}
