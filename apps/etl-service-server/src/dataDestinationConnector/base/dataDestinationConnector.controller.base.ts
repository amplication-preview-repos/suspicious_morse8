/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataDestinationConnectorService } from "../dataDestinationConnector.service";
import { DataDestinationConnectorCreateInput } from "./DataDestinationConnectorCreateInput";
import { DataDestinationConnector } from "./DataDestinationConnector";
import { DataDestinationConnectorFindManyArgs } from "./DataDestinationConnectorFindManyArgs";
import { DataDestinationConnectorWhereUniqueInput } from "./DataDestinationConnectorWhereUniqueInput";
import { DataDestinationConnectorUpdateInput } from "./DataDestinationConnectorUpdateInput";

export class DataDestinationConnectorControllerBase {
  constructor(protected readonly service: DataDestinationConnectorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataDestinationConnector })
  async createDataDestinationConnector(
    @common.Body() data: DataDestinationConnectorCreateInput
  ): Promise<DataDestinationConnector> {
    return await this.service.createDataDestinationConnector({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        endpoint: true,
        credentials: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataDestinationConnector] })
  @ApiNestedQuery(DataDestinationConnectorFindManyArgs)
  async dataDestinationConnectors(
    @common.Req() request: Request
  ): Promise<DataDestinationConnector[]> {
    const args = plainToClass(
      DataDestinationConnectorFindManyArgs,
      request.query
    );
    return this.service.dataDestinationConnectors({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        endpoint: true,
        credentials: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataDestinationConnector })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataDestinationConnector(
    @common.Param() params: DataDestinationConnectorWhereUniqueInput
  ): Promise<DataDestinationConnector | null> {
    const result = await this.service.dataDestinationConnector({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        typeField: true,
        endpoint: true,
        credentials: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataDestinationConnector })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataDestinationConnector(
    @common.Param() params: DataDestinationConnectorWhereUniqueInput,
    @common.Body() data: DataDestinationConnectorUpdateInput
  ): Promise<DataDestinationConnector | null> {
    try {
      return await this.service.updateDataDestinationConnector({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          typeField: true,
          endpoint: true,
          credentials: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataDestinationConnector })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataDestinationConnector(
    @common.Param() params: DataDestinationConnectorWhereUniqueInput
  ): Promise<DataDestinationConnector | null> {
    try {
      return await this.service.deleteDataDestinationConnector({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          typeField: true,
          endpoint: true,
          credentials: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
