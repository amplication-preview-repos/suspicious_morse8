/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DataDestinationConnector } from "./DataDestinationConnector";
import { DataDestinationConnectorCountArgs } from "./DataDestinationConnectorCountArgs";
import { DataDestinationConnectorFindManyArgs } from "./DataDestinationConnectorFindManyArgs";
import { DataDestinationConnectorFindUniqueArgs } from "./DataDestinationConnectorFindUniqueArgs";
import { CreateDataDestinationConnectorArgs } from "./CreateDataDestinationConnectorArgs";
import { UpdateDataDestinationConnectorArgs } from "./UpdateDataDestinationConnectorArgs";
import { DeleteDataDestinationConnectorArgs } from "./DeleteDataDestinationConnectorArgs";
import { DataDestinationConnectorService } from "../dataDestinationConnector.service";
@graphql.Resolver(() => DataDestinationConnector)
export class DataDestinationConnectorResolverBase {
  constructor(protected readonly service: DataDestinationConnectorService) {}

  async _dataDestinationConnectorsMeta(
    @graphql.Args() args: DataDestinationConnectorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DataDestinationConnector])
  async dataDestinationConnectors(
    @graphql.Args() args: DataDestinationConnectorFindManyArgs
  ): Promise<DataDestinationConnector[]> {
    return this.service.dataDestinationConnectors(args);
  }

  @graphql.Query(() => DataDestinationConnector, { nullable: true })
  async dataDestinationConnector(
    @graphql.Args() args: DataDestinationConnectorFindUniqueArgs
  ): Promise<DataDestinationConnector | null> {
    const result = await this.service.dataDestinationConnector(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DataDestinationConnector)
  async createDataDestinationConnector(
    @graphql.Args() args: CreateDataDestinationConnectorArgs
  ): Promise<DataDestinationConnector> {
    return await this.service.createDataDestinationConnector({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DataDestinationConnector)
  async updateDataDestinationConnector(
    @graphql.Args() args: UpdateDataDestinationConnectorArgs
  ): Promise<DataDestinationConnector | null> {
    try {
      return await this.service.updateDataDestinationConnector({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DataDestinationConnector)
  async deleteDataDestinationConnector(
    @graphql.Args() args: DeleteDataDestinationConnectorArgs
  ): Promise<DataDestinationConnector | null> {
    try {
      return await this.service.deleteDataDestinationConnector(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
